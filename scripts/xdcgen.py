#!/usr/bin/env python3

# Copyright © 2025 Karol Zmijewski
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the “Software”), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import argparse
import logging
import xml.etree.ElementTree as ET
from datetime import datetime

def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=[
            logging.FileHandler('xdcgen.log'),
            logging.StreamHandler()
        ]
    )

def parse_args():
    parser = argparse.ArgumentParser(
        description='Generate XDC constraints from XML pin definitions.'
    )
    parser.add_argument(
        'input',
        nargs='?',
        default='../board_files/z7-nano-7020/1.0/part0_pins.xml',
        help='Path to the XML file containing pin definitions.'
    )
    parser.add_argument(
        'output',
        nargs='?',
        default='z7-nano-7020.xdc',
        help='Output XDC file name (default: z7-nano-7020.xdc)'
    )
    return parser.parse_args()

def generate_xdc_from_xml(input, output):
    logging.info('Starting XDC generation from XML pin definitions.')
    try:
        tree = ET.parse(input)
        root = tree.getroot()
        with open(output, 'w') as f:
            logging.info(f'Writing XDC constraints to {output}')
            f.write(f'# XDC constraints generated from XML pin definitions {input}\n')
            f.write(f'# Generated by xdcgen.py at: {datetime.now().strftime("%d %B %Y, %H:%M")}\n')
            f.write('# File has following format:\n')
            f.write('# set_property PACKAGE_PIN <pin_name> [get_ports <port_name>]\n')
            f.write('# set_property IOSTANDARD <iostandard> [get_ports <port_name>]\n\n')
            logging.info('Processing XML file for pin definitions.')
            for pin in root.findall('.//pin'):
                name = pin.attrib.get('name')
                loc = pin.attrib.get('loc')
                iostd = pin.attrib.get('iostandard')
                if name and loc:
                    f.write(f'set_property PACKAGE_PIN {loc} [get_ports {name}]\n')
                    if iostd:
                        f.write(f'set_property IOSTANDARD {iostd} [get_ports {name}]\n')
            logging.info('XDC generation completed successfully.')
    except ET.ParseError as e:
        logging.error(f'Error parsing XML file: {e}')

def main():
    setup_logging()
    args = parse_args()
    generate_xdc_from_xml(args.input, args.output)

if __name__ == '__main__':
    main()
